//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RobotResult", Namespace="http://clorofeel.quidmind.com/DataModel/RobotResult")]
    public partial class RobotResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CompassField;
        
        private string MessageField;
        
        private bool StatusOkField;
        
        private System.DateTime TimeStampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Compass {
            get {
                return this.CompassField;
            }
            set {
                if ((this.CompassField.Equals(value) != true)) {
                    this.CompassField = value;
                    this.RaisePropertyChanged("Compass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool StatusOk {
            get {
                return this.StatusOkField;
            }
            set {
                if ((this.StatusOkField.Equals(value) != true)) {
                    this.StatusOkField = value;
                    this.RaisePropertyChanged("StatusOk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((this.TimeStampField.Equals(value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FaceRecognitionResult", Namespace="http://schemas.datacontract.org/2004/07/CloRoFeel_Attente_WebRole")]
    public partial class FaceRecognitionResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string EndConditionField;
        
        private System.DateTime EndTimeField;
        
        private System.Collections.ObjectModel.ObservableCollection<QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.FacePosition> FacePositionsField;
        
        private string ImageBase64Field;
        
        private int NbFacesField;
        
        private System.DateTime StartTimeField;
        
        private string TempFileNameField;
        
        private string lastWebRequestErrorField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EndCondition {
            get {
                return this.EndConditionField;
            }
            set {
                if ((object.ReferenceEquals(this.EndConditionField, value) != true)) {
                    this.EndConditionField = value;
                    this.RaisePropertyChanged("EndCondition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.FacePosition> FacePositions {
            get {
                return this.FacePositionsField;
            }
            set {
                if ((object.ReferenceEquals(this.FacePositionsField, value) != true)) {
                    this.FacePositionsField = value;
                    this.RaisePropertyChanged("FacePositions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageBase64 {
            get {
                return this.ImageBase64Field;
            }
            set {
                if ((object.ReferenceEquals(this.ImageBase64Field, value) != true)) {
                    this.ImageBase64Field = value;
                    this.RaisePropertyChanged("ImageBase64");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NbFaces {
            get {
                return this.NbFacesField;
            }
            set {
                if ((this.NbFacesField.Equals(value) != true)) {
                    this.NbFacesField = value;
                    this.RaisePropertyChanged("NbFaces");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TempFileName {
            get {
                return this.TempFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TempFileNameField, value) != true)) {
                    this.TempFileNameField = value;
                    this.RaisePropertyChanged("TempFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastWebRequestError {
            get {
                return this.lastWebRequestErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.lastWebRequestErrorField, value) != true)) {
                    this.lastWebRequestErrorField = value;
                    this.RaisePropertyChanged("lastWebRequestError");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FacePosition", Namespace="http://schemas.datacontract.org/2004/07/CloRoFeel_Attente_WebRole")]
    public partial class FacePosition : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double AngleField;
        
        private QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.Coordinate Eye1Field;
        
        private QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.Coordinate Eye2Field;
        
        private bool KnownFaceField;
        
        private string PeopleNameField;
        
        private bool TargetedFaceField;
        
        private double WidthField;
        
        private double XField;
        
        private double YField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Angle {
            get {
                return this.AngleField;
            }
            set {
                if ((this.AngleField.Equals(value) != true)) {
                    this.AngleField = value;
                    this.RaisePropertyChanged("Angle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.Coordinate Eye1 {
            get {
                return this.Eye1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Eye1Field, value) != true)) {
                    this.Eye1Field = value;
                    this.RaisePropertyChanged("Eye1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.Coordinate Eye2 {
            get {
                return this.Eye2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Eye2Field, value) != true)) {
                    this.Eye2Field = value;
                    this.RaisePropertyChanged("Eye2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool KnownFace {
            get {
                return this.KnownFaceField;
            }
            set {
                if ((this.KnownFaceField.Equals(value) != true)) {
                    this.KnownFaceField = value;
                    this.RaisePropertyChanged("KnownFace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PeopleName {
            get {
                return this.PeopleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PeopleNameField, value) != true)) {
                    this.PeopleNameField = value;
                    this.RaisePropertyChanged("PeopleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TargetedFace {
            get {
                return this.TargetedFaceField;
            }
            set {
                if ((this.TargetedFaceField.Equals(value) != true)) {
                    this.TargetedFaceField = value;
                    this.RaisePropertyChanged("TargetedFace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Coordinate", Namespace="http://schemas.datacontract.org/2004/07/CloRoFeel_Attente_WebRole")]
    public partial class Coordinate : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double XField;
        
        private double YField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://clorofeel.quidmind.com/ServiceModel/RobotVideo", ConfigurationName="ClorofeelCloudServices.RobotVideo")]
    public interface RobotVideo {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://clorofeel.quidmind.com/ServiceModel/RobotVideo/RobotVideo/SendLastPicture", ReplyAction="http://clorofeel.quidmind.com/ServiceModel/RobotVideo/RobotVideo/SendLastPictureR" +
            "esponse")]
        System.IAsyncResult BeginSendLastPicture(string secureToken, int positionBoussolle, string pictureBase64, System.AsyncCallback callback, object asyncState);
        
        void EndSendLastPicture(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://clorofeel.quidmind.com/ServiceModel/RobotVideo/RobotVideo/GetLastPicture", ReplyAction="http://clorofeel.quidmind.com/ServiceModel/RobotVideo/RobotVideo/GetLastPictureRe" +
            "sponse")]
        System.IAsyncResult BeginGetLastPicture(System.AsyncCallback callback, object asyncState);
        
        QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotResult EndGetLastPicture(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://clorofeel.quidmind.com/ServiceModel/RobotVideo/RobotVideo/GetLastFaceRecog" +
            "nitionResult", ReplyAction="http://clorofeel.quidmind.com/ServiceModel/RobotVideo/RobotVideo/GetLastFaceRecog" +
            "nitionResultResponse")]
        System.IAsyncResult BeginGetLastFaceRecognitionResult(System.AsyncCallback callback, object asyncState);
        
        QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.FaceRecognitionResult EndGetLastFaceRecognitionResult(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://clorofeel.quidmind.com/ServiceModel/RobotVideo/RobotVideo/TestMethod", ReplyAction="http://clorofeel.quidmind.com/ServiceModel/RobotVideo/RobotVideo/TestMethodRespon" +
            "se")]
        System.IAsyncResult BeginTestMethod(System.AsyncCallback callback, object asyncState);
        
        string EndTestMethod(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://clorofeel.quidmind.com/ServiceModel/RobotVideo/RobotVideo/AddFaceToDatabas" +
            "e", ReplyAction="http://clorofeel.quidmind.com/ServiceModel/RobotVideo/RobotVideo/AddFaceToDatabas" +
            "eResponse")]
        System.IAsyncResult BeginAddFaceToDatabase(string peopleName, string picWithFaceBase64, System.AsyncCallback callback, object asyncState);
        
        string EndAddFaceToDatabase(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface RobotVideoChannel : QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLastPictureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLastPictureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLastFaceRecognitionResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLastFaceRecognitionResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.FaceRecognitionResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.FaceRecognitionResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddFaceToDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddFaceToDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RobotVideoClient : System.ServiceModel.ClientBase<QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo>, QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo {
        
        private BeginOperationDelegate onBeginSendLastPictureDelegate;
        
        private EndOperationDelegate onEndSendLastPictureDelegate;
        
        private System.Threading.SendOrPostCallback onSendLastPictureCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLastPictureDelegate;
        
        private EndOperationDelegate onEndGetLastPictureDelegate;
        
        private System.Threading.SendOrPostCallback onGetLastPictureCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLastFaceRecognitionResultDelegate;
        
        private EndOperationDelegate onEndGetLastFaceRecognitionResultDelegate;
        
        private System.Threading.SendOrPostCallback onGetLastFaceRecognitionResultCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestMethodDelegate;
        
        private EndOperationDelegate onEndTestMethodDelegate;
        
        private System.Threading.SendOrPostCallback onTestMethodCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFaceToDatabaseDelegate;
        
        private EndOperationDelegate onEndAddFaceToDatabaseDelegate;
        
        private System.Threading.SendOrPostCallback onAddFaceToDatabaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public RobotVideoClient() {
        }
        
        public RobotVideoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RobotVideoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RobotVideoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RobotVideoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendLastPictureCompleted;
        
        public event System.EventHandler<GetLastPictureCompletedEventArgs> GetLastPictureCompleted;
        
        public event System.EventHandler<GetLastFaceRecognitionResultCompletedEventArgs> GetLastFaceRecognitionResultCompleted;
        
        public event System.EventHandler<TestMethodCompletedEventArgs> TestMethodCompleted;
        
        public event System.EventHandler<AddFaceToDatabaseCompletedEventArgs> AddFaceToDatabaseCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo.BeginSendLastPicture(string secureToken, int positionBoussolle, string pictureBase64, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendLastPicture(secureToken, positionBoussolle, pictureBase64, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo.EndSendLastPicture(System.IAsyncResult result) {
            base.Channel.EndSendLastPicture(result);
        }
        
        private System.IAsyncResult OnBeginSendLastPicture(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string secureToken = ((string)(inValues[0]));
            int positionBoussolle = ((int)(inValues[1]));
            string pictureBase64 = ((string)(inValues[2]));
            return ((QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo)(this)).BeginSendLastPicture(secureToken, positionBoussolle, pictureBase64, callback, asyncState);
        }
        
        private object[] OnEndSendLastPicture(System.IAsyncResult result) {
            ((QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo)(this)).EndSendLastPicture(result);
            return null;
        }
        
        private void OnSendLastPictureCompleted(object state) {
            if ((this.SendLastPictureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendLastPictureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendLastPictureAsync(string secureToken, int positionBoussolle, string pictureBase64) {
            this.SendLastPictureAsync(secureToken, positionBoussolle, pictureBase64, null);
        }
        
        public void SendLastPictureAsync(string secureToken, int positionBoussolle, string pictureBase64, object userState) {
            if ((this.onBeginSendLastPictureDelegate == null)) {
                this.onBeginSendLastPictureDelegate = new BeginOperationDelegate(this.OnBeginSendLastPicture);
            }
            if ((this.onEndSendLastPictureDelegate == null)) {
                this.onEndSendLastPictureDelegate = new EndOperationDelegate(this.OnEndSendLastPicture);
            }
            if ((this.onSendLastPictureCompletedDelegate == null)) {
                this.onSendLastPictureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendLastPictureCompleted);
            }
            base.InvokeAsync(this.onBeginSendLastPictureDelegate, new object[] {
                        secureToken,
                        positionBoussolle,
                        pictureBase64}, this.onEndSendLastPictureDelegate, this.onSendLastPictureCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo.BeginGetLastPicture(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLastPicture(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotResult QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo.EndGetLastPicture(System.IAsyncResult result) {
            return base.Channel.EndGetLastPicture(result);
        }
        
        private System.IAsyncResult OnBeginGetLastPicture(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo)(this)).BeginGetLastPicture(callback, asyncState);
        }
        
        private object[] OnEndGetLastPicture(System.IAsyncResult result) {
            QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotResult retVal = ((QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo)(this)).EndGetLastPicture(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLastPictureCompleted(object state) {
            if ((this.GetLastPictureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLastPictureCompleted(this, new GetLastPictureCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLastPictureAsync() {
            this.GetLastPictureAsync(null);
        }
        
        public void GetLastPictureAsync(object userState) {
            if ((this.onBeginGetLastPictureDelegate == null)) {
                this.onBeginGetLastPictureDelegate = new BeginOperationDelegate(this.OnBeginGetLastPicture);
            }
            if ((this.onEndGetLastPictureDelegate == null)) {
                this.onEndGetLastPictureDelegate = new EndOperationDelegate(this.OnEndGetLastPicture);
            }
            if ((this.onGetLastPictureCompletedDelegate == null)) {
                this.onGetLastPictureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLastPictureCompleted);
            }
            base.InvokeAsync(this.onBeginGetLastPictureDelegate, null, this.onEndGetLastPictureDelegate, this.onGetLastPictureCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo.BeginGetLastFaceRecognitionResult(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLastFaceRecognitionResult(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.FaceRecognitionResult QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo.EndGetLastFaceRecognitionResult(System.IAsyncResult result) {
            return base.Channel.EndGetLastFaceRecognitionResult(result);
        }
        
        private System.IAsyncResult OnBeginGetLastFaceRecognitionResult(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo)(this)).BeginGetLastFaceRecognitionResult(callback, asyncState);
        }
        
        private object[] OnEndGetLastFaceRecognitionResult(System.IAsyncResult result) {
            QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.FaceRecognitionResult retVal = ((QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo)(this)).EndGetLastFaceRecognitionResult(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLastFaceRecognitionResultCompleted(object state) {
            if ((this.GetLastFaceRecognitionResultCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLastFaceRecognitionResultCompleted(this, new GetLastFaceRecognitionResultCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLastFaceRecognitionResultAsync() {
            this.GetLastFaceRecognitionResultAsync(null);
        }
        
        public void GetLastFaceRecognitionResultAsync(object userState) {
            if ((this.onBeginGetLastFaceRecognitionResultDelegate == null)) {
                this.onBeginGetLastFaceRecognitionResultDelegate = new BeginOperationDelegate(this.OnBeginGetLastFaceRecognitionResult);
            }
            if ((this.onEndGetLastFaceRecognitionResultDelegate == null)) {
                this.onEndGetLastFaceRecognitionResultDelegate = new EndOperationDelegate(this.OnEndGetLastFaceRecognitionResult);
            }
            if ((this.onGetLastFaceRecognitionResultCompletedDelegate == null)) {
                this.onGetLastFaceRecognitionResultCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLastFaceRecognitionResultCompleted);
            }
            base.InvokeAsync(this.onBeginGetLastFaceRecognitionResultDelegate, null, this.onEndGetLastFaceRecognitionResultDelegate, this.onGetLastFaceRecognitionResultCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo.BeginTestMethod(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestMethod(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo.EndTestMethod(System.IAsyncResult result) {
            return base.Channel.EndTestMethod(result);
        }
        
        private System.IAsyncResult OnBeginTestMethod(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo)(this)).BeginTestMethod(callback, asyncState);
        }
        
        private object[] OnEndTestMethod(System.IAsyncResult result) {
            string retVal = ((QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo)(this)).EndTestMethod(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestMethodCompleted(object state) {
            if ((this.TestMethodCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestMethodCompleted(this, new TestMethodCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestMethodAsync() {
            this.TestMethodAsync(null);
        }
        
        public void TestMethodAsync(object userState) {
            if ((this.onBeginTestMethodDelegate == null)) {
                this.onBeginTestMethodDelegate = new BeginOperationDelegate(this.OnBeginTestMethod);
            }
            if ((this.onEndTestMethodDelegate == null)) {
                this.onEndTestMethodDelegate = new EndOperationDelegate(this.OnEndTestMethod);
            }
            if ((this.onTestMethodCompletedDelegate == null)) {
                this.onTestMethodCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestMethodCompleted);
            }
            base.InvokeAsync(this.onBeginTestMethodDelegate, null, this.onEndTestMethodDelegate, this.onTestMethodCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo.BeginAddFaceToDatabase(string peopleName, string picWithFaceBase64, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFaceToDatabase(peopleName, picWithFaceBase64, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo.EndAddFaceToDatabase(System.IAsyncResult result) {
            return base.Channel.EndAddFaceToDatabase(result);
        }
        
        private System.IAsyncResult OnBeginAddFaceToDatabase(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string peopleName = ((string)(inValues[0]));
            string picWithFaceBase64 = ((string)(inValues[1]));
            return ((QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo)(this)).BeginAddFaceToDatabase(peopleName, picWithFaceBase64, callback, asyncState);
        }
        
        private object[] OnEndAddFaceToDatabase(System.IAsyncResult result) {
            string retVal = ((QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo)(this)).EndAddFaceToDatabase(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddFaceToDatabaseCompleted(object state) {
            if ((this.AddFaceToDatabaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFaceToDatabaseCompleted(this, new AddFaceToDatabaseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFaceToDatabaseAsync(string peopleName, string picWithFaceBase64) {
            this.AddFaceToDatabaseAsync(peopleName, picWithFaceBase64, null);
        }
        
        public void AddFaceToDatabaseAsync(string peopleName, string picWithFaceBase64, object userState) {
            if ((this.onBeginAddFaceToDatabaseDelegate == null)) {
                this.onBeginAddFaceToDatabaseDelegate = new BeginOperationDelegate(this.OnBeginAddFaceToDatabase);
            }
            if ((this.onEndAddFaceToDatabaseDelegate == null)) {
                this.onEndAddFaceToDatabaseDelegate = new EndOperationDelegate(this.OnEndAddFaceToDatabase);
            }
            if ((this.onAddFaceToDatabaseCompletedDelegate == null)) {
                this.onAddFaceToDatabaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFaceToDatabaseCompleted);
            }
            base.InvokeAsync(this.onBeginAddFaceToDatabaseDelegate, new object[] {
                        peopleName,
                        picWithFaceBase64}, this.onEndAddFaceToDatabaseDelegate, this.onAddFaceToDatabaseCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo CreateChannel() {
            return new RobotVideoClientChannel(this);
        }
        
        private class RobotVideoClientChannel : ChannelBase<QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo>, QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo {
            
            public RobotVideoClientChannel(System.ServiceModel.ClientBase<QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotVideo> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSendLastPicture(string secureToken, int positionBoussolle, string pictureBase64, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = secureToken;
                _args[1] = positionBoussolle;
                _args[2] = pictureBase64;
                System.IAsyncResult _result = base.BeginInvoke("SendLastPicture", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendLastPicture(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SendLastPicture", _args, result);
            }
            
            public System.IAsyncResult BeginGetLastPicture(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetLastPicture", _args, callback, asyncState);
                return _result;
            }
            
            public QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotResult EndGetLastPicture(System.IAsyncResult result) {
                object[] _args = new object[0];
                QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotResult _result = ((QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.RobotResult)(base.EndInvoke("GetLastPicture", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLastFaceRecognitionResult(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetLastFaceRecognitionResult", _args, callback, asyncState);
                return _result;
            }
            
            public QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.FaceRecognitionResult EndGetLastFaceRecognitionResult(System.IAsyncResult result) {
                object[] _args = new object[0];
                QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.FaceRecognitionResult _result = ((QuidMind.CloRoFeel.VideoViewer.ClorofeelCloudServices.FaceRecognitionResult)(base.EndInvoke("GetLastFaceRecognitionResult", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTestMethod(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("TestMethod", _args, callback, asyncState);
                return _result;
            }
            
            public string EndTestMethod(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("TestMethod", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddFaceToDatabase(string peopleName, string picWithFaceBase64, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = peopleName;
                _args[1] = picWithFaceBase64;
                System.IAsyncResult _result = base.BeginInvoke("AddFaceToDatabase", _args, callback, asyncState);
                return _result;
            }
            
            public string EndAddFaceToDatabase(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("AddFaceToDatabase", _args, result)));
                return _result;
            }
        }
    }
}
